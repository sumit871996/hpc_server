# This dockerfile installs mpich as base
FROM ubuntu:20.04 AS mpibase

# Install packages
ARG REQUIRE="sudo build-essential"
RUN apt-get update && \\
    DEBIAN_FRONTEND=noninteractive apt-get install -y ${REQUIRE} && \\
    apt-get clean

# Install essential packages and certificates
RUN apt-get update && \\
    DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates openssl && \\
    update-ca-certificates && \\
    apt-get clean

# INSTALL MPICH
ARG MPI_VERSION
ARG MPI_CONFIGURE_OPTIONS
ARG MPI_MAKE_OPTIONS

# Download, build, and install MPICH
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y wget && \\
    mkdir /tmp/mpich-src && \\
    cd /tmp/mpich-src && \\
    wget http://www.mpich.org/static/downloads/${MPI_VERSION}/mpich-${MPI_VERSION}.tar.gz --no-check-certificate && \\
    tar xfz mpich-${MPI_VERSION}.tar.gz && \\
    cd mpich-${MPI_VERSION} && \\
    ./configure ${MPI_CONFIGURE_OPTIONS} && \\
    make && \\
    make install && \\
    rm -rf /tmp/mpich-src && \\
    apt-get remove --purge -y wget && apt-get autoremove -y && apt-get clean

# TEST MPICH INSTALLATION
COPY mpich-test/* /tmp/mpich-test/
RUN cd /tmp/mpich-test && \\
    sh test.sh && \\
    rm -rf /tmp/mpich-test

# CLEAN UP
RUN rm -rf /tmp/*

# ADD DEFAULT USER
ARG USER
ENV USER ${USER}
RUN useradd -m ${USER} && \\
    echo "${USER}   ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
ENV USER_HOME /home/${USER}
RUN chown -R ${USER}:${USER} ${USER_HOME} || true


# CREATE WORKING DIRECTORY FOR USER
ARG WORKDIR
ENV WORKDIR ${WORKDIR}
RUN mkdir ${WORKDIR} && \\
chown -R ${USER}:${USER} ${WORKDIR}
WORKDIR ${WORKDIR}
USER ${USER}
CMD ["/bin/bash"]


FROM mpibase AS applicationimage

RUN sudo apt-get update && sudo apt-get install -y unzip

#### CREATE WORKING DIRECTORY FOR USER ####
USER ${USER}
WORKDIR ${WORKDIR}

COPY ./application.zip .
ARG c_file
RUN unzip -u application.zip && \\
    c_file=$(find . -type f -name *.c -print -quit) && \\
    mpicc ${c_file} -o application.exe
CMD ["sh", "-c", "./application.exe 1>&2 & tail -f /dev/null"]